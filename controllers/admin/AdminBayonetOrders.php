<?php
/**
* 2007-2021 PrestaShop
*
* NOTICE OF LICENSE
*
* This source file is subject to the Academic Free License (AFL 3.0)
* that is bundled with this package in the file LICENSE.txt.
* It is also available through the world-wide-web at this URL:
* http://opensource.org/licenses/afl-3.0.php
* If you did not receive a copy of the license and are unable to
* obtain it through the world-wide-web, please send an email
* to license@prestashop.com so we can send you a copy immediately.
*
* DISCLAIMER
*
* Do not edit or add to this file if you wish to upgrade PrestaShop to newer
* versions in the future. If you wish to customize PrestaShop for your
* needs please refer to http://www.prestashop.com for more information.
*
*  @author    PrestaShop SA <contact@prestashop.com>
*  @copyright 2007-2021 PrestaShop SA
*  @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
*  International Registered Trademark & Property of PrestaShop SA
*/

class AdminBayonetOrdersController extends ModuleAdminController
{
    public function __construct()
    {
        $this->table = 'bayonet_antifraud_orders';
        $this->module = 'bayonetantifraud';
        $this->lang = false;
        $this->_defaultOrderBy = $this->identifier = 'bayonet_id';
        $this->bootstrap = true;
        $this->context = Context::getContext();
        $this->_where = 'AND consulting_api IS NOT NULL';

        $this->fields_list = [
            'bayonet_id' => [
                'title' => 'ID',
                'align' => 'center',
                'class' => 'fixed-width-xs',
                'remove_onclick' => true,
                'hint' => $this->context->getTranslator()->trans('The ID of this table', [], 'Modules.Bayonetantifraud.Adminbayonetorders'),
            ],
            'cart_id' => [
                'title' => $this->context->getTranslator()->trans('Cart', [], 'Modules.Bayonetantifraud.Adminbayonetorders'),
                'align' => 'center',
                'remove_onclick' => true,
                'hint' => $this->context->getTranslator()->trans('The cart associated to this order', [], 'Modules.Bayonetantifraud.Adminbayonetorders'),
            ],
            'order_id' => [
                'title' => $this->context->getTranslator()->trans('Order', [], 'Modules.Bayonetantifraud.Adminbayonetorders'),
                'align' => 'center',
                'hint' => $this->context->getTranslator()->trans('The ID of the order', [], 'Modules.Bayonetantifraud.Adminbayonetorders'),
                'remove_onclick' => true,
                'callback' => 'vieworder',
            ],
            'bayonet_tracking_id' => [
                'title' => 'Bayonet Tracking ID',
                'align' => 'center',
                'remove_onclick' => true,
                'orderby' => false,
                'hint' => $this->context->getTranslator()->trans('An ID generated by the Bayonet API for this transaction', [], 'Modules.Bayonetantifraud.Adminbayonetorders'),
            ],
            'decision' => [
                'title' => $this->context->getTranslator()->trans('Decision', [], 'Modules.Bayonetantifraud.Adminbayonetorders'),
                'align' => 'center',
                'remove_onclick' => true,
                'hint' => $this->context->getTranslator()->trans('The actual decision obtained after the order analysis, this is what you use to decide what to do with an order, if an order has DECLINE in this field, you should cancel it right away', [], 'Modules.Bayonetantifraud.Adminbayonetorders'),
            ],
        ];

        parent::__construct();
    }

    /**
     * Initializes the Controller's page header toolbar, adding a custom button to go to the module's settings.
     */
    public function initPageHeaderToolbar()
    {
        $this->page_header_toolbar_btn['custom_button'] = [
            'href' => $this->context->link->getAdminLink('AdminModules') . '&configure=' . $this->module->name .
                '&tab_module=payment_security&module_name=' . $this->module->name,
            'desc' => $this->l('Bayonet Settings'),
            'icon' => 'process-icon-configure',
        ];

        parent::initPageHeaderToolbar();
    }

    /**
     * Initializes the Controller's toolbar, disabling the "new" button.
     */
    public function initToolbar()
    {
        parent::initToolbar();
        unset($this->toolbar_btn['new']);
    }

    /**
     * Renders the list to display in the module's tab in the back office.
     *
     * @return string HTML content
     */
    public function renderList()
    {
        if (isset($this->_filter) && '' == trim($this->_filter)) {
            $this->_filter = $this->original_filter;
        }

        $content = parent::renderList();

        return $content;
    }

    /**
     * Sets a link to the order detais in every order ID on the list in the module's tab in the back office.
     *
     * @param string $value
     * @param array $row
     */
    public function viewOrder($value)
    {
        $link = $this->context->link->getAdminLink('AdminOrders', true, [], ['id_customer' => $id_customer, 'viewcustomer' => 1]) . '&id_order=' . (int) $value . '&vieworder';

        return '<a href="' . $link . '" target=”_blank”>' . (int) $value . '</a>';
    }
}
